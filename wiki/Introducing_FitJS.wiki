= Introduction =

FitJS is a AJAX (containing javascript and php) library for Fitbit's RESTful API. It's initial release focuses on Fitbit's OAuth authentication process. So users can call javascript functions directly to automate the authentication process. 

= A Quick Guide to Using FitJS =

==Prerequisite==
  * You need to know basics of Javascript and/or PHP
  * You ought to understand basics of OAuth authentication. If not, you may want to read https://wiki.fitbit.com/display/API/OAuth+Authentication+in+the+Fitbit+API#OAuthAuthenticationintheFitbitAPI-TheOAuthFlow

*1. Using FitJS*

  * copy the entire FitJS folder to your javascript folder
  * include fitjs.js in your html
{{{
<script src="fitjs/fitjs.js"></script>   
}}}

*2. Initializing FitJS*

{{{
foauth=new FitJS_OAuth("http://example.com/oauthverifier.php",  //callback URL for OAuth verifier
                                "999999999999999999999999", //consumer key provided by Fitbit
                                "HMAC-SHA1" // hash method. FitJS 1.0 only supports HMAC-SHA1.
                                );
}}}

*3. Request Token* 

{{{
    var baseString=foauth.oauthBaseString("request_token"); // create base string of the signature
    var signature=foauth.oauthSignatureString(baseString); // generate signature string with HMAC-SHA1
    foauth.requestToken(signature, true, readyStateChange);   // request token  
}}}

Please note that "readyStategChange" is a callback function that will take XMLHttpRequest as an argument. To check whether you receive a valid response you may want to do:

{{{
   function readyStateChange(xmlhttp)
{
    if (xmlhttp.readyState===4 && xmlhttp.status===200)
    {
        //receive temporary token from Fitbit API successfully
    }
    else
    {
        // error handling
    }
}
}}}

*4. Redirect users to Fitbit.com for Authorization"

After you received a valid token from Fitbit.com you should then redirect your users to Fitbit.com for their authorizations on your access to their data. In the example below, the redirection is sent out only when token is received. Therefore, the code is placed in "readyStateChange" function (in the last step)


{{{
function readyStategChange(xmlhttp)
{
    if (xmlhttp.readyState===4 && xmlhttp.status===200)
    {
        foauth.authorize(true, "en_US", false, 800, 500);
        foauth.checkOAuthVerifier(2000, 10000, onTimeOut, onFinished, onFailed);
    }
}
}}}